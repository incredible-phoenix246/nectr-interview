name: Deploy Production
on:
  push:
    branches: [prod]
    paths:
      - 'smart-contract/**'
      - '**' 
      - '.github/workflows/deploy-production.yml'
  workflow_dispatch:
    inputs:
      force_deploy_contract:
        description: 'Force deploy smart contract even if no changes'
        required: false
        default: false
        type: boolean

env:
  FOUNDRY_PROFILE: production

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      contract-changed: ${{ steps.changes.outputs.contract }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 2
      
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            contract:
              - 'smart-contract/**'
            frontend:
              - '**'
              - '!smart-contract/**'
              - '!.github/**'

  deploy-contract:
    name: Deploy Smart Contract
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.contract-changed == 'true' || github.event.inputs.force_deploy_contract == 'true'
    defaults:
      run:
        working-directory: smart-contract
    outputs:
      contract-address: ${{ steps.deploy.outputs.contract-address }}
      deployment-successful: ${{ steps.deploy.outcome == 'success' }}
    steps:
      - uses: actions/checkout@v5
        with:
          submodules: recursive
      
      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
      
      - name: Create .env file
        run: |
          echo "PRIVATE_KEY=${{ secrets.PRIVATE_KEY }}" > .env
          echo "POLYGONSCAN_API_KEY=${{ secrets.POLYGONSCAN_API_KEY }}" >> .env
      
      - name: Run tests before deployment
        run: forge test
      
      - name: Deploy to Polygon Amoy
        id: deploy
        run: |
          forge script script/Deploy.s.sol --rpc-url amoy --broadcast --verify --gas-limit 2500000 --gas-price 20000000000 -vvv
          # Extract contract address from deployment logs
          CONTRACT_ADDRESS=$(forge script script/Deploy.s.sol --rpc-url amoy --sig "run()" | grep "NECTRToken deployed to:" | awk '{print $4}')
          echo "contract-address=$CONTRACT_ADDRESS" >> $GITHUB_OUTPUT
          echo "Deployed contract address: $CONTRACT_ADDRESS"
      
      - name: Save deployment artifacts
        uses: actions/upload-artifact@v4
        with:
          name: contract-deployment
          path: |
            smart-contract/broadcast/
            smart-contract/out/

  deploy-frontend:
    name: Deploy Frontend
    runs-on: ubuntu-latest
    needs: [detect-changes, deploy-contract]
    if: |
      always() && 
      (needs.detect-changes.outputs.frontend-changed == 'true' || 
       needs.deploy-contract.outputs.deployment-successful == 'true')
    steps:
      - uses: actions/checkout@v5
      
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '22'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
      
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      
      - name: Update contract address if new deployment
        if: needs.deploy-contract.outputs.contract-address
        run: |
          NEW_ADDRESS="${{ needs.deploy-contract.outputs.contract-address }}"
          # Update contract address in environment
          echo "Using new contract address: $NEW_ADDRESS"
          echo "NEXT_PUBLIC_NECTR_CONTRACT_ADDRESS=$NEW_ADDRESS" >> $GITHUB_ENV
      
      - name: Build application
        run: pnpm build
        env:
          NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID: ${{ secrets.NEXT_PUBLIC_WALLETCONNECT_PROJECT_ID }}
          NEXT_PUBLIC_NECTR_CONTRACT_ADDRESS: ${{ env.NEXT_PUBLIC_NECTR_CONTRACT_ADDRESS || '0xD2afEf4d43a6a82CA129a3Adf4231587503408F6' }}
          NEXT_PUBLIC_CHAIN_ID: "80002"
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          vercel-args: '--prod'
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-contract, deploy-frontend]
    if: always()
    steps:
      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-contract.result }}" == "success" ]]; then
            echo "**Smart Contract**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "**Contract Address**: ${{ needs.deploy-contract.outputs.contract-address }}" >> $GITHUB_STEP_SUMMARY
            echo "**Explorer**: [View on PolygonScan](https://amoy.polygonscan.com/address/${{ needs.deploy-contract.outputs.contract-address }})" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-contract.result }}" == "skipped" ]]; then
            echo "**Smart Contract**: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Smart Contract**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.deploy-frontend.result }}" == "success" ]]; then
            echo "**Frontend**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
            echo "**Live URL**: [NECTR dApp](https://your-app.vercel.app)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deploy-frontend.result }}" == "skipped" ]]; then
            echo "**Frontend**: Skipped (no changes)" >> $GITHUB_STEP_SUMMARY
          else
            echo "**Frontend**: Deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
